from vertexai.preview.reasoning_engines import LangchainAgent
from app.services.bigquery_service import BigQueryService
from app.services.monitoring_service import MonitoringService
from app.services.gcp_billing_service import GCPBillingService
from app.services.integration_service import CRMIntegration, ERPIntegration, FinancialIntegration
from app.utils.config import PlatformConfig
from app.tools.anomaly_tools import detect_anomalies
from app.models.anomaly import Anomaly
from google.adk.agents import LlmAgent


class AnomalyDetectionAgent(LlmAgent):
    def __init__(
        self,
        config: PlatformConfig,
        bq_service: BigQueryService,
        monitoring_service: MonitoringService,
        billing_service: GCPBillingService,
    ):
        # Initialize services BEFORE calling super().__init__()
        # Store them with double underscore to avoid Pydantic field validation
        self.__config = config
        self.__bq = bq_service
        self.__monitoring = monitoring_service
        self.__billing = billing_service
        self.__crm = CRMIntegration(system=config.crm_system)
        self.__erp = ERPIntegration(system=config.erp_system)
        self.__fin = FinancialIntegration(system=config.financial_system)

        tools = [self.flag_anomalies]

        # Now call parent constructor
        super().__init__(
            name="anomaly_detection_agent",
            model="gemini-2.0-flash",
            tools=tools,
            description="Detect and correlate anomalies across cost, usage, business KPIs, and financial data."
        )

    @property
    def config(self):
        return self.__config

    @property
    def bq(self):
        return self.__bq

    @property
    def monitoring(self):
        return self.__monitoring

    @property
    def billing(self):
        return self.__billing

    @property
    def crm(self):
        return self.__crm

    @property
    def erp(self):
        return self.__erp

    @property
    def fin(self):
        return self.__fin

    def flag_anomalies(self) -> list[Anomaly]:
        return detect_anomalies(
            config=self.config,
            bq=self.bq,
            monitoring=self.monitoring,
            billing=self.billing,
            crm=self.crm,
            erp=self.erp,
            fin=self.fin,
        )