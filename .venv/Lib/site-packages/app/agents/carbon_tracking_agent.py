# app/agents/carbon_tracking_agent.py

from typing import List
from datetime import datetime
from vertexai.preview.reasoning_engines import ReasoningEngine
from google.adk.agents import LlmAgent

from app.models.carbon import CarbonFootprint
from app.services.vertex_ai_service import VertexAIService
from app.services.bigquery_service import BigQueryService
from app.utils.config import PlatformConfig

class CarbonTrackingAgent(LlmAgent):
    def __init__(
        self,
        config: PlatformConfig,
        vertex_service: VertexAIService,
        bq_service: BigQueryService
    ):
        self.__vertex = vertex_service
        self.__bq = bq_service
        self.__config = config

        super().__init__(
            name="carbon_tracking_agent",
            model="gemini-2.0-flash",
            description="Estimates carbon emissions and persists sustainability data",
            tools=[self.track_carbon],
        )
    @property
    def bq(self):
        return self.__bq

    @property
    def vertex(self):
        return self.__vertex

    @property
    def config(self):
        return self.__config

    def track_carbon(self) -> List[CarbonFootprint]:
        # 1) Optionally fetch usage from BigQuery
        # 2) Call service to estimate carbon
        footprints = self.vertex.calculate_carbon_emissions([], include_scope_3=True)

        # 3) Transform + persist
        results: List[CarbonFootprint] = []
        rows = []
        ts = datetime.utcnow().isoformat()
        # assuming footprints returns dict with total; adapt if list
        cf = CarbonFootprint(
            region="global",
            workload_name="all",
            cloud_provider="GCP",
            estimated_kg_co2e=footprints["total_kg_co2e"],
            emission_intensity=0.0,
            renewable_percent=0.0,
            greener_alternative_region="",
            potential_saving_kg_co2e=0.0,
            recommendation=""
        )
        results.append(cf)
        rows.append({
            "timestamp": ts,
            "region": cf.region,
            "workload_name": cf.workload_name,
            "cloud_provider": cf.cloud_provider,
            "estimated_kg_co2e": cf.estimated_kg_co2e,
            "emission_intensity": cf.emission_intensity,
            "renewable_percent": cf.renewable_percent,
            "greener_alternative_region": cf.greener_alternative_region,
            "potential_saving_kg_co2e": cf.potential_saving_kg_co2e,
            "recommendation": cf.recommendation,
        })
        self.bq.insert_rows("carbon_metrics", rows)
        return results
